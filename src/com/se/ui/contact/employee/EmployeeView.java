/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.se.ui.contact.employee;

import com.se.database.entities.Employee;
import com.se.database.sql.EmployeeSQL;
import com.se.ui.dashboard.DashboardView;
import static com.se.ui.dashboard.DashboardView.DesktopPane;
import java.awt.Component;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Hp
 */
public class EmployeeView extends javax.swing.JInternalFrame {

    /**
     * Creates new form ViewEmployee
     */
    public EmployeeView() {
        initComponents();
        //initializeView();
    }

    private DefaultTableModel dtm;
    private List<Employee> list;
    private Employee emp1;
    private String aRole;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgRole = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblEmp = new javax.swing.JTable();
        btnNew = new javax.swing.JButton();
        cbRemove = new javax.swing.JCheckBox();
        btnRemove = new javax.swing.JButton();
        pnlFilters = new javax.swing.JPanel();
        lblId = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        lblNic = new javax.swing.JLabel();
        txtNic = new javax.swing.JTextField();
        lblRole = new javax.swing.JLabel();
        rbAdmin = new javax.swing.JRadioButton();
        rbOthers = new javax.swing.JRadioButton();
        btnClear = new javax.swing.JButton();

        setClosable(true);
        setTitle("Employee");

        jPanel1.setMaximumSize(new java.awt.Dimension(1007, 588));

        tblEmp.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        tblEmp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee ID", "Name", "NIC", "Phone", "e-mail", "Last Logged In"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblEmp.getTableHeader().setReorderingAllowed(false);
        tblEmp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblEmpMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblEmp);
        if (tblEmp.getColumnModel().getColumnCount() > 0) {
            tblEmp.getColumnModel().getColumn(0).setMinWidth(0);
            tblEmp.getColumnModel().getColumn(0).setPreferredWidth(90);
            tblEmp.getColumnModel().getColumn(0).setMaxWidth(90);
        }

        btnNew.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        btnNew.setText("New");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        cbRemove.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        cbRemove.setText("Check to remove the selected employee");
        cbRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbRemoveActionPerformed(evt);
            }
        });

        btnRemove.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        pnlFilters.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 120, 212), 1, true), "Filters", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(0, 120, 212))); // NOI18N

        lblId.setText("ID :");

        txtId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtIdKeyReleased(evt);
            }
        });

        lblNic.setText("NIC :");

        txtNic.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNicKeyReleased(evt);
            }
        });

        lblRole.setText("Role :");

        bgRole.add(rbAdmin);
        rbAdmin.setText("Admin");
        rbAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbAdminActionPerformed(evt);
            }
        });

        bgRole.add(rbOthers);
        rbOthers.setText("Others");
        rbOthers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbOthersActionPerformed(evt);
            }
        });

        btnClear.setText("Clear All");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlFiltersLayout = new javax.swing.GroupLayout(pnlFilters);
        pnlFilters.setLayout(pnlFiltersLayout);
        pnlFiltersLayout.setHorizontalGroup(
            pnlFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlFiltersLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(lblId)
                .addGap(18, 18, 18)
                .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblNic)
                .addGap(18, 18, 18)
                .addGroup(pnlFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtNic, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(171, 171, 171)
                .addComponent(lblRole)
                .addGap(18, 18, 18)
                .addComponent(rbAdmin)
                .addGap(18, 18, 18)
                .addComponent(rbOthers)
                .addGap(28, 28, 28))
        );
        pnlFiltersLayout.setVerticalGroup(
            pnlFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFiltersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblId)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNic)
                    .addComponent(txtNic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRole)
                    .addComponent(rbAdmin)
                    .addComponent(rbOthers))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(btnClear)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbRemove)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnNew, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(42, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 934, Short.MAX_VALUE)
                            .addComponent(pnlFilters, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(48, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(pnlFilters, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbRemove)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnNew)
                    .addComponent(btnRemove))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        this.dispose();
        NewEmployeeView view = new NewEmployeeView();
        DashboardView.DesktopPane.remove((Component) view);
        DashboardView.DesktopPane.add((Component) view);
        view.initializeView(emp1);
        view.setLocation((int) ((DesktopPane.getSize().width - view.getSize().width) / 2), (int) ((DesktopPane.getSize().height - view.getSize().height) / 2));
        view.setVisible(true);
    }//GEN-LAST:event_btnNewActionPerformed

    private void tblEmpMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblEmpMouseReleased
        if (evt.getClickCount() == 2) {
            EmployeeDetailsView view = new EmployeeDetailsView();
            DashboardView.DesktopPane.remove((Component) view);
            DashboardView.DesktopPane.add((Component) view);
//            int id = 0;
//            String name = null;
//            String uName = null;
//            String nic = null;
//            String email = null;
//            String phone = null;
//            String role = null;
            Employee temp = null;
            for (Employee emp : list) {
                if (Integer.parseInt(tblEmp.getValueAt(tblEmp.getSelectedRow(), 0).toString()) == emp.getEmp_id()) {
                    temp = emp;
//                    id = emp.getEmp_id();
//                    name = emp.getName();
//                    uName = emp.getUname();
//                    nic = emp.getNic();
//                    email = emp.getEmail();
//                    phone = emp.getPhone();
//                    role = emp.getRole();
                }
            }
            view.initializeView(temp, emp1);
            //view.initializeView(id, name, uName, nic, email, phone, role);
            view.setLocation((int) ((DesktopPane.getSize().width - view.getSize().width) / 2), (int) ((DesktopPane.getSize().height - view.getSize().height) / 2));
//            this.dispose();
            view.setVisible(true);
        }
    }//GEN-LAST:event_tblEmpMouseReleased

    private void cbRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbRemoveActionPerformed
        if (cbRemove.isSelected()) {
            btnRemove.setEnabled(true);
        } else {
            btnRemove.setEnabled(false);
        }
    }//GEN-LAST:event_cbRemoveActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        int count = tblEmp.getSelectedRowCount();
        switch (count) {
            case 0:
                JOptionPane.showMessageDialog(this, "Please select an employee", "", JOptionPane.INFORMATION_MESSAGE);
                break;
            case 1:
                int input = JOptionPane.showConfirmDialog(this, "Do you want to remove the selected employee?", "", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (input == JOptionPane.YES_OPTION) {
                    EmployeeSQL.removeEmployee(Integer.parseInt(tblEmp.getValueAt(tblEmp.getSelectedRow(), 0).toString()));
                    JOptionPane.showMessageDialog(this, "The employee was removed", "", JOptionPane.INFORMATION_MESSAGE);
                    this.dispose();
                    DashboardView.DesktopPane.remove((Component) this);
                    DashboardView.DesktopPane.add((Component) this);
                    this.initializeView(emp1);
                    this.setLocation((int) ((DesktopPane.getSize().width - this.getSize().width) / 2), (int) ((DesktopPane.getSize().height - this.getSize().height) / 2));
                    this.dispose();
                    this.setVisible(true);

                }
                break;
            default:
                JOptionPane.showMessageDialog(this, "Please select one employee at a time", "", JOptionPane.INFORMATION_MESSAGE);
                tblEmp.clearSelection();
                break;
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        txtId.setText("");
        txtNic.setText("");
        bgRole.clearSelection();
        setDtmEmployee();
        String lli = null;
        for (Employee emp : list) {
            if (emp.getAvailability() == 1) {
                if (emp.getLast_logged_in().equals("0000-00-00 00:00:00")) {
                    lli = "never";
                } else {
                    lli = emp.getLast_logged_in();
                }
                dtm.addRow(new Object[]{emp.getEmp_id(), emp.getTitle() + " " + emp.getName(), emp.getNic(), emp.getPhone(), emp.getEmail(), lli});
            }
        }
//        this.initializeView(aRole);
    }//GEN-LAST:event_btnClearActionPerformed

    private void txtIdKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIdKeyReleased
        String id = txtId.getText();
        String nic = txtNic.getText();
        String role;
        if (rbAdmin.isSelected()) {
            role = rbAdmin.getText();
        } else if (rbOthers.isSelected()) {
            role = rbOthers.getText();
        } else {
            role = "";
        }

        searchAction(id, nic, role);
    }//GEN-LAST:event_txtIdKeyReleased

    private void txtNicKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNicKeyReleased
        String id = txtId.getText();
        String nic = txtNic.getText();
        String role;
        if (rbAdmin.isSelected()) {
            role = rbAdmin.getText();
        } else if (rbOthers.isSelected()) {
            role = rbOthers.getText();
        } else {
            role = "";
        }

        searchAction(id, nic, role);
    }//GEN-LAST:event_txtNicKeyReleased

    private void rbAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbAdminActionPerformed
        String id = txtId.getText();
        String nic = txtNic.getText();
        String role;
        if (rbAdmin.isSelected()) {
            role = rbAdmin.getText();
        } else if (rbOthers.isSelected()) {
            role = rbOthers.getText();
        } else {
            role = "";
        }

        searchAction(id, nic, role);
    }//GEN-LAST:event_rbAdminActionPerformed

    private void rbOthersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbOthersActionPerformed
        String id = txtId.getText();
        String nic = txtNic.getText();
        String role;
        if (rbAdmin.isSelected()) {
            role = rbAdmin.getText();
        } else if (rbOthers.isSelected()) {
            role = rbOthers.getText();
        } else {
            role = "";
        }

        searchAction(id, nic, role);
    }//GEN-LAST:event_rbOthersActionPerformed

    private void setDtmEmployee() {
        dtm = (DefaultTableModel) tblEmp.getModel();
        dtm.getDataVector().removeAllElements();
        dtm.fireTableDataChanged();
    }

    public void initializeView(Employee emp1) {
        this.emp1 = emp1;
        this.aRole = emp1.getRole();
        if (aRole.equals("Admin")) {
            btnNew.setVisible(true);
            cbRemove.setVisible(true);
            btnRemove.setVisible(true);
            cbRemove.setSelected(false);
            btnRemove.setEnabled(false);
        } else {
            btnNew.setVisible(false);
            cbRemove.setVisible(false);
            btnRemove.setVisible(false);
        }

        txtId.setText("");
        txtNic.setText("");
        bgRole.clearSelection();
        rbAdmin.setActionCommand("Admin");
        rbOthers.setActionCommand("Others");

        setDtmEmployee();
        list = EmployeeSQL.getAllEmployee();
        String lli = null;
        for (Employee emp : list) {
            if (emp.getAvailability() == 1) {
                if (emp.getLast_logged_in().equals("0000-00-00 00:00:00")) {
                    lli = "never";
                } else {
                    lli = emp.getLast_logged_in();
                }
                dtm.addRow(new Object[]{emp.getEmp_id(), emp.getTitle() + " " + emp.getName(), emp.getNic(), emp.getPhone(), emp.getEmail(), lli});
            }
        }

//        list.forEach((emp) -> {
//            if (emp.getAvailability() == 1) {
//                if(emp.getLast_logged_in().equals("0000-00-00 00:00:00"))
//                    lli="never";
//                dtm.addRow(new Object[]{emp.getEmp_id(), emp.getTitle() + " " + emp.getName(), emp.getNic(), emp.getPhone(), emp.getEmail(), emp.getLast_logged_in()});
//            }
//        });
    }

    private void searchAction(String id, String nic, String role) {
        //System.out.println(id + " " + nic + " " + role);
        try {
            // no filters
            if (id.equals("") && nic.equals("") && role.equals("")) {
                txtId.setText("");
                txtNic.setText("");
                bgRole.clearSelection();
                setDtmEmployee();
                String lli = null;
                for (Employee emp : list) {
                    if (emp.getAvailability() == 1) {
                        if (emp.getLast_logged_in().equals("0000-00-00 00:00:00")) {
                            lli = "never";
                        } else {
                            lli = emp.getLast_logged_in();
                        }
                        dtm.addRow(new Object[]{emp.getEmp_id(), emp.getTitle() + " " + emp.getName(), emp.getNic(), emp.getPhone(), emp.getEmail(), lli});
                    }
                }
//                this.initializeView(aRole);
            } 
            
            // filter by role
            else if (id.equals("") && nic.equals("") && !role.equals("")) {
                setDtmEmployee();
                String lli = null;
                for (Employee emp : list) {
                    if (emp.getAvailability() == 1 && emp.getRole().equals(role)) {
                        if (emp.getLast_logged_in().equals("0000-00-00 00:00:00")) {
                            lli = "never";
                        } else {
                            lli = emp.getLast_logged_in();
                        }
                        dtm.addRow(new Object[]{emp.getEmp_id(), emp.getTitle() + " " + emp.getName(), emp.getNic(), emp.getPhone(), emp.getEmail(), lli});
                    }
                }
            }
            
            // filter by nic
            else if (id.equals("") && !nic.equals("") && role.equals("")) {
                setDtmEmployee();
                String lli = null;
                for (Employee emp : list) {
                    if (emp.getAvailability() == 1 && emp.getNic().toLowerCase().startsWith(nic.toLowerCase())) {
                        if (emp.getLast_logged_in().equals("0000-00-00 00:00:00")) {
                            lli = "never";
                        } else {
                            lli = emp.getLast_logged_in();
                        }
                        dtm.addRow(new Object[]{emp.getEmp_id(), emp.getTitle() + " " + emp.getName(), emp.getNic(), emp.getPhone(), emp.getEmail(), lli});
                    }
                }
            }
            
            // filter by nic and role
            else if (id.equals("") && !nic.equals("") && !role.equals("")) {
                setDtmEmployee();
                String lli = null;
                for (Employee emp : list) {
                    if (emp.getAvailability() == 1 && emp.getNic().toLowerCase().startsWith(nic.toLowerCase()) && emp.getRole().equals(role)) {
                        if (emp.getLast_logged_in().equals("0000-00-00 00:00:00")) {
                            lli = "never";
                        } else {
                            lli = emp.getLast_logged_in();
                        }
                        dtm.addRow(new Object[]{emp.getEmp_id(), emp.getTitle() + " " + emp.getName(), emp.getNic(), emp.getPhone(), emp.getEmail(), lli});
                    }
                }
            } 
            
            // filter by id
            else if (!id.equals("") && nic.equals("") && role.equals("")) {
                setDtmEmployee();
                String lli = null;
                for (Employee emp : list) {
                    if (emp.getAvailability() == 1 && emp.getEmp_id() == Integer.parseInt(id)) {
                        if (emp.getLast_logged_in().equals("0000-00-00 00:00:00")) {
                            lli = "never";
                        } else {
                            lli = emp.getLast_logged_in();
                        }
                        dtm.addRow(new Object[]{emp.getEmp_id(), emp.getTitle() + " " + emp.getName(), emp.getNic(), emp.getPhone(), emp.getEmail(), lli});
                    }
                }
            } 
            
            // filter by id and role
            else if (!id.equals("") && nic.equals("") && !role.equals("")) {
                setDtmEmployee();
                String lli = null;
                for (Employee emp : list) {
                    if (emp.getAvailability() == 1 && emp.getEmp_id() == Integer.parseInt(id) && emp.getRole().equals(role)) {
                        if (emp.getLast_logged_in().equals("0000-00-00 00:00:00")) {
                            lli = "never";
                        } else {
                            lli = emp.getLast_logged_in();
                        }
                        dtm.addRow(new Object[]{emp.getEmp_id(), emp.getTitle() + " " + emp.getName(), emp.getNic(), emp.getPhone(), emp.getEmail(), lli});
                    }
                }
            } 
            
            // filter by id and nic
            else if (!id.equals("") && !nic.equals("") && role.equals("")) {
                setDtmEmployee();
                String lli = null;
                for (Employee emp : list) {
                    if (emp.getAvailability() == 1 && emp.getEmp_id() == Integer.parseInt(id) && emp.getNic().toLowerCase().startsWith(nic.toLowerCase())) {
                        if (emp.getLast_logged_in().equals("0000-00-00 00:00:00")) {
                            lli = "never";
                        } else {
                            lli = emp.getLast_logged_in();
                        }
                        dtm.addRow(new Object[]{emp.getEmp_id(), emp.getTitle() + " " + emp.getName(), emp.getNic(), emp.getPhone(), emp.getEmail(), lli});
                    }
                }
            } 
            
            // filter by id, nic and role
            else if (!id.equals("") && !nic.equals("") && !role.equals("")) {
                setDtmEmployee();
                String lli = null;
                for (Employee emp : list) {
                    if (emp.getAvailability() == 1 && emp.getEmp_id() == Integer.parseInt(id) && emp.getNic().toLowerCase().startsWith(nic.toLowerCase()) && emp.getRole().equals(role)) {
                        if (emp.getLast_logged_in().equals("0000-00-00 00:00:00")) {
                            lli = "never";
                        } else {
                            lli = emp.getLast_logged_in();
                        }
                        dtm.addRow(new Object[]{emp.getEmp_id(), emp.getTitle() + " " + emp.getName(), emp.getNic(), emp.getPhone(), emp.getEmail(), lli});
                    }
                }
            }
            // end filtering
            
            // no employees found message
            if (tblEmp.getRowCount() == 0) {
                JOptionPane.showMessageDialog(this, "No employees found");
                txtId.setText("");
                txtNic.setText("");
                bgRole.clearSelection();
                setDtmEmployee();
                String lli = null;
                for (Employee emp : list) {
                    if (emp.getAvailability() == 1) {
                        if (emp.getLast_logged_in().equals("0000-00-00 00:00:00")) {
                            lli = "never";
                        } else {
                            lli = emp.getLast_logged_in();
                        }

                        dtm.addRow(new Object[]{emp.getEmp_id(), emp.getTitle() + " " + emp.getName(), emp.getNic(), emp.getPhone(), emp.getEmail(), lli});
                    }
                }
//                this.initializeView(aRole);
            }
        } 
        
        // id eka numbers nathuwa letters use karot error message eak
        catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Enter a valid ID");
            txtId.setText("");
            txtNic.setText("");
            bgRole.clearSelection();
            setDtmEmployee();
            String lli = null;
            for (Employee emp : list) {
                if (emp.getAvailability() == 1) {
                    if (emp.getLast_logged_in().equals("0000-00-00 00:00:00")) {
                        lli = "never";
                    } else {
                        lli = emp.getLast_logged_in();
                    }

                    dtm.addRow(new Object[]{emp.getEmp_id(), emp.getTitle() + " " + emp.getName(), emp.getNic(), emp.getPhone(), emp.getEmail(), lli});
                }
            }
//            this.initializeView(aRole);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgRole;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnRemove;
    private javax.swing.JCheckBox cbRemove;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblId;
    private javax.swing.JLabel lblNic;
    private javax.swing.JLabel lblRole;
    private javax.swing.JPanel pnlFilters;
    private javax.swing.JRadioButton rbAdmin;
    private javax.swing.JRadioButton rbOthers;
    private javax.swing.JTable tblEmp;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtNic;
    // End of variables declaration//GEN-END:variables
}
